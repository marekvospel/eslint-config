module.exports = {
  plugins: ['@typescript-eslint'],
  extends: ['vospel/base', 'plugin:@typescript-eslint/eslint-recommended'],
  parser: require.resolve('@typescript-eslint/parser'),
  parserOptions: { sourceType: 'module' },
  rules: {
    '@typescript-eslint/adjacent-overload-signatures': ['warn'],
    '@typescript-eslint/array-type': ['warn', { array: true }],
    '@typescript-eslint/ban-types': ['warn'],
    '@typescript-eslint/consistent-indexed-object-style': ['warn', 'index-signature'],
    '@typescript-eslint/consistent-type-definitions': ['error', 'interface'],
    '@typescript-eslint/explicit-function-return-type': ['warn'],
    '@typescript-eslint/member-delimiter-style': ['warn', {
      multiline: { delimiter: 'none' },
      singleline: { requireLast: false },
    }],
    '@typescript-eslint/method-signature-style': ['warn', 'method'],
    '@typescript-eslint/no-empty-interface': ['error', { allowSingleExtends: false }],
    '@typescript-eslint/no-extraneous-class': ['warn', {
      allowConstructorOnly: true,
      allowStaticOnly: true,
      allowWithDecorator: true,
    }],
    '@typescript-eslint/no-extra-non-null-assertion': ['warn'],
    '@typescript-eslint/no-for-in-array': ['error'],
    '@typescript-eslint/no-inferrable-types': ['warn'],
    '@typescript-eslint/no-misused-new': ['error'],
    '@typescript-eslint/no-namespace': ['error'],
    '@typescript-eslint/no-non-null-asserted-optional-chain': ['warn'],
    '@typescript-eslint/no-non-null-assertion': ['warn'],
    '@typescript-eslint/no-require-imports': ['warn'],
    '@typescript-eslint/no-this-alias': ['error'],
    '@typescript-eslint/no-unnecessary-type-constraint': ['warn'],
    '@typescript-eslint/no-var-requires': ['warn'],
    '@typescript-eslint/prefer-as-const': ['warn'],
    '@typescript-eslint/prefer-for-of': ['warn'],
    '@typescript-eslint/prefer-namespace-keyword': ['error'],
    '@typescript-eslint/prefer-optional-chain': ['warn'],
    '@typescript-eslint/prefer-ts-expect-error': ['warn'],
    '@typescript-eslint/type-annotation-spacing': ['warn', { before: false, after: true }],

    'quotes': ['off'],
    '@typescript-eslint/quotes': ['warn', 'single'],
    'brace-style': ['off'],
    '@typescript-eslint/brace-style': ['warn', '1tbs', { allowSingleLine: true }],
    'comma-dangle': ['off'],
    '@typescript-eslint/comma-dangle': ['warn', 'always-multiline'],
    'comma-spacing': ['off'],
    '@typescript-eslint/comma-spacing': ['warn', { before: false, after: true }],
    'indent': ['off'],
    '@typescript-eslint/indent': ['warn', 2],
    'keyword-spacing': ['off'],
    '@typescript-eslint/keyword-spacing': ['warn', {
      before: true,
      after: true,
      overrides: {
        return: { after: true },
        throw: { after: true },
        case: { after: true },
      },
    }],
    'func-call-spacing': ['off'],
    '@typescript-eslint/func-call-spacing': ['warn', 'never'],
    'object-curly-spacing': ['off'],
    '@typescript-eslint/object-curly-spacing': ['warn', 'always'],
    'space-before-blocks': ['off'],
    '@typescript-eslint/space-before-blocks': ['warn', 'always'],
    'space-infix-ops': ['off'],
    '@typescript-eslint/space-infix-ops': ['warn', { int32Hint: false }],
    'lines-between-class-members': ['off'],
    '@typescript-eslint/lines-between-class-members': ['warn', 'always', { exceptAfterSingleLine: true }],
    'space-before-function-paren': ['off'],
    '@typescript-eslint/space-before-function-paren': ['warn', {
      anonymous: 'always',
      named: 'never',
      asyncArrow: 'always',
    }],
    'no-dupe-class-members': ['off'],
    '@typescript-eslint/no-dupe-class-members': ['error'],
    'no-duplicate-imports': ['off'],
    '@typescript-eslint/no-duplicate-imports': ['warn'],
    'no-loss-of-precision': ['off'],
    '@typescript-eslint/no-loss-of-precision': ['error'],
    'no-array-constructor': ['off'],
    '@typescript-eslint/no-array-constructor': ['error'],

    'camelcase': ['off'],
    '@typescript-eslint/naming-convention': [
      'error',
      {
        selector: 'default',
        format: ['camelCase'],
      },
      {
        selector: 'variable',
        format: ['camelCase', 'UPPER_CASE'],
      },
      {
        selector: 'parameter',
        format: ['camelCase'],
        leadingUnderscore: 'allow',
      },
      {
        selector: 'memberLike',
        modifiers: ['private'],
        format: ['camelCase'],
        leadingUnderscore: 'require',
      },
      {
        selector: 'typeLike',
        format: ['PascalCase'],
      },
    ],
  },
}
